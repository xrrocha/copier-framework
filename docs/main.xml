<?xml version="1.0"?>
<?xml-stylesheet href="page.xsl" type="text/xml"?>
<page>
    <head>
        <title>The &lt;&lt;Record Copier&gt;&gt; Framework</title>
    </head>
    <body>
        <h1>Introduction</h1>
        <p>
            This tutorial introduces <em>object-oriented frameworks</em>
            through a simple example implemented in Java.
        </p>
        <p>
            The application domain used to illustrate framework development
            is that of converting between disparate file formats such as
            transforming an xbase (<em>dbf</em>) file to delimited format or
            loading a database table from a fixed-length file.
        </p>
        <p>
            The notion of object-oriented framework is first introduced as a
            design discipline that captures what does not change in an
            application domain while leaving room for future inclusion of
            those features that do change.
        </p>
        <p>
            The initial simple example is subsequently refined until it
            becomes a general-purpose tool that can be used to implement
            declarative applications in its problem domain.
        </p>

        <h1>General Concepts</h1>
        <p>
            This section presents general concepts related to the design of
            object-oriented frameworks by illustrating a simple example
            that illustrates frameworks in the small.
        </p>
        <h2>An Example Framework</h2>
        <p>
            An <em>object-oriented framework</em> is a reusable software library
            that captures the portions of an application domain that do not
            change from case to case. The portions of the application domain
            that do change are left partially defined as interfaces or
            abstract classes to be implemented in application-specific ways.
        </p>
        <p>
            In order to illustrate this point, let's consider the process of
            reading records from a source file in order to write each record
            onto a destination file. The pseudo-code for this would be something
            like:
        </p>
        <source>// Copy files
open input file
open output file
while there are input records
    read input record
    write record onto output file
close input file
close output file</source>
        <p>
            This suggests the need for the following abstractions:
        </p>
        <ul>
            <li>
                A <code>Record</code> object that represents the data
                being copied over
            </li>
            <li>
                A <code>Source</code> that can be repeatedly asked to
                produce records from an input file
            </li>
            <li>
                A <code>Destination</code> onto which records can be
                written
            </li>
        </ul>
        <p>
            Thus, a first-cut approximation to our requirement can be
            depicted in UML as:
        </p>
        <image src="basic-framework-1.png"/>
        <p>
            Here, the <code>Copier</code> framework class (the one that
            captures common behavior) relies on <code>Source</code> as
            a producer of records and <code>Destination</code> as a
            consumer of records. The Java code for the <code>copy</code>
            operation would look like:
        </p>
        <source>// Copy records
public void copy() {
    source.open();
    destination.open();

    Record record;
    while ((record = source.get()) != null) { // null => EOF
        destination.put(record);
    }

    source.close();
    destination.close();
}
        </source>
        <h2>Framework Classes and Hot Spots</h2>
        <p>
            Note that because both <code>Source</code> and
            <code>Destination</code> are interfaces there can
            be multiple, <em>replaceable</em> implementations
            corresponding to different file formats as depicted
            below:
        </p>
        <image src="basic-framework-2.png"/>
        <p>
            The logic for <code>Copier</code>'s <code>copy</code> operation,
            however, does not change depending on what specific file format
            is used to produce or consume records.
        </p>
        <p>
            Because it captures common behavior that does not change from
            application to application, <code>Copier</code> is said to be
            a <em>framework</em> class.
        </p>
        <p>
            The interfaces or abstract classes that model the portions of the
            domain that <em>can</em> change from application to application
            are called <em>hot spots</em>. In our example, interfaces
            <code>Source</code> and <code>Destination</code> are the hot
            spots for which domain-specific implementations can be written to
            build applications on top of the framework.
        </p>
        <h2>Applications</h2>
        <p>
            An <em>application</em> of the framework is an executable
            configuration and wiring together of hot spot implementations.
            In general, frameworks are not themselves executable. In order
            to obtain a running application it is necessary to
            instantiate the framework classes as augmented with
            application-specific configurations.
        </p>
        <p>
            As an example, consider the following, "manual" framework
            instantiation:
        </p>
        <source>// A sample framework instantiation
public static void main(String[] args) {
    // 1. Instantiate and configure the source hot spot
    XBaseSource source = new XBaseSource();
    source.setFilename("people.dbf");

    // 2. Instantiate and configure the destination hot spot
    XMLDestination destination = new XMLDestination();
    destination.setRootElementName("people");
    destination.setRecordElementName("person");
    destination.setXslStylesheet("people.xsl");
    destination.setOutputFilename("people.xml");

    // 3. Instantiate and configure the framework class
    Copier copier = new Copier();
    copier.setSource(source);
    copier.setDestination(destination);

    // 4. Run the application
    copier.copy();
}
        </source>
        <p>
            Note how the framework instantiation does not contain
            application <em>logic</em> as such but only instantiation,
            configuration and wiring. This allows for
            <em>declarative</em> framework instantiation.
        </p>
        <h2>Configuration Files</h2>
        <p>
            Declarative framework instantiations are usually stored outside
            program code in the form of <em>configuration files</em>.
            Common configuration formats are
            <a href="http://yaml.org/">Yaml</a> and XML. The following
            Yaml configuration is equivalent to the above Java code:
        </p>
        <source>--- !org.plenix.copier.Copier
    source: !org.plenix.record.xbase.XBaseSource
        filename: "people.dbf"
    destination: !org.plenix.record.xml.XMLDestination
        rootElementName: "people"
        recordElementName: "person"
        xslStylsheet: "people.xsl"
        outputFilename: "people.xml"
        </source>
        <p>
            By using a configuration file like this, application instantiation
            and execution are greatly simplified:
        </p>
        <source>// Application instantiation and execution
public static void main(String[] args) {
    YamlReader reader = new YamlReader(new FileReader(args[0]));
    Copier copier = reader.read(Copier.class);
    copier.copy();
}</source>
        <h2>The <em>Hollywood Principle</em></h2>
        <p>
            Software libraries are probably the most common form of code reuse.
            When an application makes use of a library it is the application
            that dictates the flow of control: library services are invoked
            if and when the application sees fit.
        </p>
        <p>
            When reusing a framework, on the other hand, it is the framework
            that controls the flow of execution. Application code
            gets called if and when the framework sees fit.
        </p>
        <p>
            This is frequently referred to as <em>inversion of control</em>
            or, humorously, as the "Hollywood Principle":
            <em>Don't call us, we'll call you</em>.
        </p>
        <h2>Dependency Injection</h2>
        <p>
            Central to the notion of framework is that framework classes do
            not know what specific implementations of its hot spots are used
            at runtime. Thus, an external agent must take on the responsibility
            of instantiating, configuring and wiring together framework
            components in order to build an executable application.
        </p>
        <p>
            Framework classes <em>depend</em> on their hot spots to provide
            actual application-specific functionality. Application-specific
            classes as well framework-provided hot spot implementations
            tailored to application-specific needs are referred to as
            <em>dependencies</em> of the framework class.
        </p>
        <p>
            The process of supplying properly configured application-specific
            hot spot implementations is referred to as
            <em>dependency injection</em>. This term emphasizes the notion
            that dependency resolution is carried out by an agent other than
            the framework classes themselves.
        </p>

        <h1>The Record Copier</h1>
        <p>
            This section elaborates on the record copier framework to
            illustrate how frameworks evolve.
        </p>
        <h2>Copying Framework</h2>
        <p>
            Closer examination reveals that the <em>essence</em> of
            copying is not restricted to <code>Record</code>s at all.
            In fact, objects of <em>any</em> type can be copied between
            sources and destinations following the simple but generic
            logic stated so far.
        </p>
        <p>
            An appropriate way of capturing this genericity and decouple
            our framework class from the notion of <code>Record</code> is
            parametrizing the class as depicted below:
        </p>
        <image src="basic-framework-3.png"/>
        <p>
            This class model yields an implementation like:
        </p>
        <source><![CDATA[// Parametrized copier
public class Copier<E> {
    private Source<E> source;
    private Destination<E> destination;

    public void copy() {
        source.open();
        destination.open();

        E element;
        while ((e = source.get()) != null) {
            destination.put(e);
        }

        source.close();
        destination.close();
    }
    . . .
}]]></source>
        <note>
            This simple implementation does not yet take into account
            exception handling.
        </note>

        <h2>What's in a <code>Record</code>?</h2>
        <image src="basic-record.png"/>
        <p>
            In its initial incarnation, a <code>Record</code> is simply a
            structure that maps field names to scalar <code>String</code>
            field values. Subsequent version of this class will support
            typed fields.
        </p>

        <h2>A Concrete Example: Delimited File Record Source</h2>
        <image src="DelimitedFileRecordSource.png"/>
        <p>
            This class implements a record source that reads records from
            a delimited file as follows:
        </p>
        <source><![CDATA[// A delimited file record source
public class DelimitedFileRecordSource implements Source<Record> {
    private String filename;
    private String separator = "\t";
    private List<String> fieldNames;

    private BufferedReader in;

    public void open() {
        in = new BufferedReader(new FileReader(filename));
    }

    public Record get() {
        String line = in.readLine();
        if (line == null) {
            return null;
        }
        Record record = new Record();
        String[] fieldValues = line.split(separator);
        for (int i = 0; i < fieldValues.length && i < fieldNames.size(); i++) {
            record.setField(fieldNames.get(i), fieldValues[i]);
        }
        return record;
    }

    public void close() {
        in.close();
    }
}
        ]]></source>

        <h2>Another Concrete Example: Delimited File Record Destination</h2>
        <image src="DelimitedFileRecordDestination.png"/>
        <p>
            This class writes a record into a delimited file output file
            as follows:
        </p>
        <source><![CDATA[// A delimited file record destination
public class DelimitedFileRecordDestination implements Destination<Record> {
    private String filename;
    private String separator = "\t";
    private List<String> fieldNames;

    private PrintWriter out;

    public void open() {
        out = new PrintWriter(new FileWriter(filename), true);
    }

    public void put(Record  record) {
        for (int i = 0; i < fieldNames.length; i++) {
            if (i > 0) {
                out.print(separator);
            }
            String fieldValue = record.get(fieldNames[i]);
            if (fieldValue != null) {
                out.print(fieldValue);
            }
        }
        out.println();
    }

    public void close() {
        out.close();
    }
}]]></source>

        <h2>Factoring Out Commonality in Delimited File Components</h2>
        <p>
            As can be seen in the above examples, the two classes share a
            common configuration consisting of the file name, separator and
            list of field names. This commonality can be factored out in
            an abstract superclass <code>DelimitedFileRecordComponent</code>
            as follows:
        </p>
        <image src="DelimitedFileRecordComponent.png"/>

        <h2>Improving on Input and Output</h2>
        <p>
            So far, our examples classes have used a <code>String</code>
            <em>filename</em> property that is used to open operating system
            files only.
        </p>
        <p>
            However, we'd like to decouple input and output from this specific
            mechanism so that, for example, input can come from a URL or
            output can go to a socket output stream.
        </p>
        <p>
            In order to allow this we now add two abstractions:
        </p>
        <ul>
            <li>
                <code>InputStreamSource</code>: a component that can
                repeatedly return an input stream pointing to the same
                underlying resource.
            </li>
            <li>
                <code>OutputStreamSource</code>: a component that can
                repeatedly return an output stream pointing to the same
                underlying resource.
            </li>
        </ul>
        <image src="input-output-source.png"/>
        <p>
            Thus, for example, the implementation of
            <code>FileInputStreamSource</code> would look like:
        </p>
        <source><![CDATA[// A file-based input stream source
public class FileInputStreamSource implements InputStreamSource {
    private String filename;

    public InputStream getInputStream() {
        return new FileInputStream(filename);
    }
    . . .
}]]></source>
        <p>
            Through the use of these abstractions it is possible now to
            implement our record components so that their input or output
            is not limited to the local filesystem:
        </p>
        <image src="DelimitedFileRecordComponent-2.png"/>
        <p>
            The implementation for <code>DelimitedFileRecordDestination</code>
            is now:
        </p>
        <source>// An improved version with generalized output
public class DelimitedFileRecordDestination implements Destination&lt;Record&gt; {
    private String separator = "\t";
    private List&lt;String&gt; fieldNames;
    <u>private OutputStreamSource outputStreamSource;</u>

    private PrintWriter out;

    public void open() {
        out = new PrintWriter(new OutputStreamWriter(<u>outputStreamSource.getOutputSource()</u>), true);
    }

    public void put(Record  record) {
        for (int i = 0; i &lt; fieldNames.length; i++) {
            if (i &gt; 0) {
                out.print(separator);
            }
            String fieldValue = record.get(fieldNames[i]);
            if (fieldValue != null) {
                out.print(fieldValue);
            }
        }
        out.println();
    }

    public void close() {
        out.close();
    }
}</source>

    </body>
</page>
